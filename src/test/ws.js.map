{"version":3,"file":"ws.js","sourceRoot":"","sources":["ws.ts"],"names":[],"mappings":";;AAAA,cAAY;AAEZ,gCAAgC;AAIhC,KAAK,UAAU,IAAI,CAAC,IAAI,GAAC,wBAAwB;IAC7C,MAAM,EAAE,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;IAC/B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC3B,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,GAAE,EAAE,CAAA,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACP,CAAC;AAED,KAAK,UAAU,IAAI,CAAC,EAAS;IACzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC3B,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;AACP,CAAC;AAED,KAAK,UAAU,EAAE,CAAoB,EAAa;IAC9C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC3B,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AACP,CAAC;AAED,KAAK,UAAU,CAAC,CAAoB,EAAa,EAAE,CAAI;IACnD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACnC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;YAC7B,IAAI,CAAC;gBAAE,MAAM,CAAC,CAAC,CAAC,CAAC;;gBACZ,OAAO,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC;AAED,KAAK,UAAU,GAAG;IACd,MAAM,GAAG,GAAC,MAAM,IAAI,EAAE,CAAC;IACvB,MAAM,GAAG,GAAC,MAAM,IAAI,EAAE,CAAC;IACvB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACxB,MAAM,CAAC,CAAiB,GAAG,EAAE;QACzB,IAAI,EAAE,SAAS;QACf,EAAE,EAAE,OAAO;KACd,CAAC,CAAC;IACH,MAAM,CAAC,CAAiB,GAAG,EAAE;QACzB,IAAI,EAAE,SAAS;QACf,EAAE,EAAE,OAAO;KACd,CAAC,CAAC;IACH,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC;IACjB,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAClC,MAAM,CAAC,CAAc,GAAG,EAAE;QACtB,IAAI,EAAE,MAAM;QACZ,EAAE,EAAE,OAAO;QACX,IAAI,EAAE,KAAK;QACX,UAAU,EAAC,KAAK;KACnB,CAAC,CAAC;IACH,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACxB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AACtC,CAAC;AAED,GAAG,EAAE,CAAC","sourcesContent":["import '..';\r\n\r\nimport * as WebSocket from 'ws';\r\nimport {ConnectMessage, DataMessage, Message} from \"grage-lib/lib\";\r\n\r\n\r\nasync function open(addr='ws://127.0.0.1:1337/ws'):Promise<WebSocket>{\r\n    const ws = new WebSocket(addr);\r\n    return new Promise((resolve) => {\r\n        ws.once('open', ()=>resolve(ws));\r\n    });\r\n}\r\n\r\nasync function wait(ms:number){\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n\r\nasync function wm<T extends Message>(ws: WebSocket): Promise<T> {\r\n    return new Promise((resolve) => {\r\n        ws.once('message', resolve);\r\n    });\r\n}\r\n\r\nasync function s<T extends Message>(ws: WebSocket, d: T) {\r\n    return new Promise((resolve, reject) => {\r\n        ws.send(JSON.stringify(d), (e) => {\r\n            if (e) reject(e);\r\n            else resolve(null);\r\n        });\r\n    });\r\n}\r\n\r\nasync function run() {\r\n    const ws1=await open();\r\n    const ws2=await open();\r\n    console.log('1,2 open');\r\n    await s<ConnectMessage>(ws1, {\r\n        type: 'connect',\r\n        id: 'hello'\r\n    });\r\n    await s<ConnectMessage>(ws2, {\r\n        type: 'connect',\r\n        id: 'hello'\r\n    });\r\n    await wait(1000);\r\n    console.log('connected to hello');\r\n    await s<DataMessage>(ws1, {\r\n        type: 'data',\r\n        id: 'hello',\r\n        data: 'lol',\r\n        fromDevice:false,\r\n    });\r\n    console.log('sent lol');\r\n    console.log('[2]', await wm(ws2));\r\n}\r\n\r\nrun();\r\n"]}